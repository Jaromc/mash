include
{
	MashTexCoords.eff
}

vertexInput
{
	float3 position : position
	float3 normal : normal
	float2 texcoord : texcoord
	
	float4 matrixA : texcoord
	float4 matrixB : texcoord
	float4 matrixC : texcoord
	float4 matrixD : texcoord
}

vertexOutput
{
	float4 viewposition : viewposition
	float3 viewnormal : viewnormal
	float2 texcoord : texcoord pass
}

autos
{
	float4x4 autoView
}

source
{	
	VOUT vertexmain(VIN input)
	{
		VOUT output;
		
		/*
			Notice the following mul is in (vec, matrix) order. 
			We build this world matrix from raw data sent from the CPU witch is
			in row major order.
			
			Where as float4x4 autos are multiplied in (matrix, vec) order because
			they are automatically placed in column major order.
		*/
		float4x4 worldMat = float4x4(input.matrixA, input.matrixB, input.matrixC, input.matrixD);
		output.viewposition = mul(float4(input.position, 1), worldMat);
		output.viewnormal = mul(float4(input.normal, 0), worldMat);
		
		output.viewposition = mul(autoView, output.viewposition);
		output.viewnormal = mul(autoView, output.viewnormal);
		
		output.texcoord = mashGetTexcoords(input.texcoord);
		
		return output;
	}
}