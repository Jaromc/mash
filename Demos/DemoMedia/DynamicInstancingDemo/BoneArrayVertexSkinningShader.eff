
vertexInput
{
	//stream 0
	float3 position : position
	float3 normal : normal
	float4 blendWeights : blendweight
	float4 blendIndices : blendindex
	float2 texcoord : texcoord
	
	//stream 1
	float instanceId : custom
}

vertexOutput
{
	float4 viewposition : viewposition
	float3 viewnormal : viewnormal
	float2 texcoord : texcoord pass
}

autos
{
	float4x4 autoView
}

source
{	
	struct sSkinInput
	{
		float4 position;
		float4 blendWeights;
		float4 blendIndices;
		float3 normal;
	};
	
	struct sSkinOutput
	{
		float4 position;
		float3 normal;
	};
	
	#define MAX_INSTANCE_COUNT 5
	#define BONE_COUNT 26
	/*
		These autos could have also been defined in the auto block. They are 
		defined here simply so we can use #defines. Also, there is no 
		chance of duplicate autos since these are user created.
	*/
	float4x4 batchedBonePalette[MAX_INSTANCE_COUNT * BONE_COUNT];
	
	sSkinOutput vertexskinning(sSkinInput input, int instanceId)
	{
		sSkinOutput output = (sSkinOutput)0;
		float totalWeight = 0.0;
		int boneStep = BONE_COUNT * instanceId;
		if (input.blendWeights.x > 0.0)
		{
			totalWeight += input.blendWeights.x;
			output.position += mul(batchedBonePalette[(int)input.blendIndices.x + boneStep], input.position) * input.blendWeights.x;
			output.normal += mul(batchedBonePalette[(int)input.blendIndices.x + boneStep], float4(input.normal, 0.0f)) * input.blendWeights.x;
		}
		if (input.blendWeights.y > 0.0)
		{
			totalWeight += input.blendWeights.y;
			output.position += mul(batchedBonePalette[(int)input.blendIndices.y + boneStep], input.position) * input.blendWeights.y;
			output.normal += mul(batchedBonePalette[(int)input.blendIndices.y + boneStep], float4(input.normal, 0.0f)) * input.blendWeights.y;
		}
		if (input.blendWeights.z > 0.0)
		{
			totalWeight += input.blendWeights.z;
			output.position += mul(batchedBonePalette[(int)input.blendIndices.z + boneStep], input.position) * input.blendWeights.z;
			output.normal += mul(batchedBonePalette[(int)input.blendIndices.z + boneStep], float4(input.normal, 0.0f)) * input.blendWeights.z;
		}
		
		totalWeight = 1 - totalWeight;
		if (totalWeight > 0.0)
		{
			output.position += mul(batchedBonePalette[(int)input.blendIndices.w + boneStep], input.position) * totalWeight;
			output.normal += mul(batchedBonePalette[(int)input.blendIndices.w + boneStep], float4(input.normal, 0.0f)) * totalWeight;
		}

		return output;
	}
	
	VOUT vertexmain(VIN input)
	{
		VOUT output;
		sSkinInput skinningInput;
		skinningInput.position = float4(input.position, 1.0f);
		skinningInput.normal = input.normal;
		skinningInput.blendWeights = input.blendWeights;
		skinningInput.blendIndices = input.blendIndices;
		
		sSkinOutput skinOutput = vertexskinning(skinningInput, (int)input.instanceId);
		output.viewposition = mul(autoView, float4(skinOutput.position.xyz, 1.0));
		output.viewnormal = mul(autoView, skinOutput.normal);
		output.texcoord = input.texcoord;
		
		return output;
	}
}