
vertexInput
{
	//stream 0
	float3 position : position
	float3 normal : normal
	float4 blendWeights : blendweight
	float4 blendIndices : blendindex
	float2 texcoord : texcoord
	
	//stream 1
	float instanceId : custom
}

vertexOutput
{
	float4 viewposition : viewposition
	float3 viewnormal : viewnormal
	float2 texcoord : texcoord pass
}

autos
{
	float4x4 autoView
	float2 boneTextureDim
	sampler2D autoSampler1
}

source
{	
	struct sSkinInput
	{
		float4 position;
		float4 blendWeights;
		float4 blendIndices;
		float3 normal;
	};
	
	struct sSkinOutput
	{
		float4 position;
		float3 normal;
	};
	
	float4x4 FetchBoneFromTexture(int instanceId, int boneId)
	{
		float2 boneTexcoords = float2((float)boneId * 4.0, (float)instanceId / boneTextureDim.y);
		float4 matA = tex2Dlod(autoSampler1, float4(boneTexcoords.x / boneTextureDim.x, boneTexcoords.y, 0, 1));
		float4 matB = tex2Dlod(autoSampler1, float4((boneTexcoords.x + 1) / boneTextureDim.x, boneTexcoords.y, 0, 1));
		float4 matC = tex2Dlod(autoSampler1, float4((boneTexcoords.x + 2) / boneTextureDim.x, boneTexcoords.y, 0, 1));
		float4 matD = tex2Dlod(autoSampler1, float4((boneTexcoords.x + 3) / boneTextureDim.x, boneTexcoords.y, 0, 1));
		return float4x4(matA, matB, matC, matD);
	}
	
	sSkinOutput vertexskinning(sSkinInput input, int instanceId)
	{		
		sSkinOutput output = (sSkinOutput)0;
		float totalWeight = 0.0;
		if (input.blendWeights.x > 0.0)
		{
			totalWeight += input.blendWeights.x;
			float4x4 boneMatrix = FetchBoneFromTexture(instanceId, (int)input.blendIndices.x);
			output.position += mul(input.position, boneMatrix) * input.blendWeights.x;
			output.normal += mul(float4(input.normal, 0.0f), boneMatrix) * input.blendWeights.x;
		}
		if (input.blendWeights.y > 0.0)
		{
			totalWeight += input.blendWeights.y;
			float4x4 boneMatrix = FetchBoneFromTexture(instanceId, (int)input.blendIndices.y);
			output.position += mul(input.position, boneMatrix) * input.blendWeights.y;
			output.normal += mul(float4(input.normal, 0.0f), boneMatrix) * input.blendWeights.y;
		}
		if (input.blendWeights.z > 0.0)
		{
			totalWeight += input.blendWeights.z;
			float4x4 boneMatrix = FetchBoneFromTexture(instanceId, (int)input.blendIndices.z);
			output.position += mul(input.position, boneMatrix) * input.blendWeights.z;
			output.normal += mul(float4(input.normal, 0.0f), boneMatrix) * input.blendWeights.z;
		}
		
		totalWeight = 1 - totalWeight;
		if (totalWeight > 0.0)
		{
			float4x4 boneMatrix = FetchBoneFromTexture(instanceId, (int)input.blendIndices.w);
			output.position += mul(input.position, boneMatrix) * totalWeight;
			output.normal += mul(float4(input.normal, 0.0f), boneMatrix) * totalWeight;
		}

		return output;
	}
	
	VOUT vertexmain(VIN input)
	{
		VOUT output;
		sSkinInput skinningInput;
		skinningInput.position = float4(input.position, 1.0f);
		skinningInput.normal = input.normal;
		skinningInput.blendWeights = input.blendWeights;
		skinningInput.blendIndices = input.blendIndices;
		
		sSkinOutput skinOutput = vertexskinning(skinningInput, (int)input.instanceId);
		output.viewposition = mul(autoView, float4(skinOutput.position.xyz, 1.0));
		output.viewnormal = mul(autoView, skinOutput.normal);
		output.texcoord = input.texcoord;
		
		return output;
	}
}