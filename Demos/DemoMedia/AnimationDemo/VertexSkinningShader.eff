
vertexInput
{
	float3 position : position;
	float3 normal : normal;
	float4 blendWeights : blendweight;
	float4 blendIndices : blendindex;
	float2 texcoord : texcoord;
}

vertexOutput
{
	float4 viewposition : viewposition
	float3 viewnormal : viewnormal
	float2 texcoord : texcoord pass
	float4 specular : specular
}

autos
{
	float4x4 autoView
	float4x4 autoBonePalette[26]
}

source
{	
	struct sSkinInput
	{
		float4 position;
		float4 blendWeights;
		float4 blendIndices;
		float3 normal;
	};
	
	struct sSkinOutput
	{
		float4 position;
		float3 normal;
	};
	
	sSkinOutput vertexskinning(sSkinInput input)
	{
		sSkinOutput output = (sSkinOutput)0;
		float totalWeight = 0.0;
		if (input.blendWeights.x > 0.0)
		{
			totalWeight += input.blendWeights.x;
			output.position += mul(autoBonePalette[(int)input.blendIndices.x], input.position) * input.blendWeights.x;
			output.normal += mul(autoBonePalette[(int)input.blendIndices.x], float4(input.normal, 0.0f)) * input.blendWeights.x;
		}
		if (input.blendWeights.y > 0.0)
		{
			totalWeight += input.blendWeights.y;
			output.position += mul(autoBonePalette[(int)input.blendIndices.y], input.position) * input.blendWeights.y;
			output.normal += mul(autoBonePalette[(int)input.blendIndices.y], float4(input.normal, 0.0f)) * input.blendWeights.y;
		}
		if (input.blendWeights.z > 0.0)
		{
			totalWeight += input.blendWeights.z;
			output.position += mul(autoBonePalette[(int)input.blendIndices.z], input.position) * input.blendWeights.z;
			output.normal += mul(autoBonePalette[(int)input.blendIndices.z], float4(input.normal, 0.0f)) * input.blendWeights.z;
		}
		
		totalWeight = 1 - totalWeight;
		if (totalWeight > 0.0)
		{
			output.position += mul(autoBonePalette[(int)input.blendIndices.w], input.position) * totalWeight;
			output.normal += mul(autoBonePalette[(int)input.blendIndices.w], float4(input.normal, 0.0f)) * totalWeight;
		}

		return output;
	}
	
	VOUT vertexmain(VIN input)
	{
		VOUT output;
		sSkinInput skinningInput;
		skinningInput.position = float4(input.position, 1.0f);
		skinningInput.normal = input.normal;
		skinningInput.blendWeights = input.blendWeights;
		skinningInput.blendIndices = input.blendIndices;
		
		sSkinOutput skinOutput = vertexskinning(skinningInput);
		output.viewposition = mul(autoView, float4(skinOutput.position.xyz, 1.0));
		output.viewnormal = mul(autoView, skinOutput.normal);
		output.texcoord = input.texcoord;
		
		output.specular = float4(1,1,1,1);
		
		return output;
	}
}