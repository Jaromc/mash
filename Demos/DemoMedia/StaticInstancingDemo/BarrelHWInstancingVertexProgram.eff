include
{
	MashTexCoords.eff
}

vertexInput
{
	float3 position : position
	float3 normal : normal
	float2 texcoord : texcoord
	
	float4 matrixA : custom
	float4 matrixB : custom
	float4 matrixC : custom
	float4 matrixD : custom
}

vertexOutput
{
	float4 viewposition : viewposition
	float3 viewnormal : viewnormal
	float2 texcoord : texcoord pass
}

autos
{
	float4x4 autoView
}

source
{	
	VOUT vertexmain(VIN input)
	{
		VOUT output;
		
		/*
			Note : Matrix constructors in HLSL place data in row-major order. So we need to transpose
			the data here to match the auto vars.
		*/
		float4x4 worldMat = float4x4(input.matrixA, input.matrixB, input.matrixC, input.matrixD);
		output.viewposition = mul(float4(input.position, 1), worldMat);
		output.viewnormal = mul(float4(input.normal, 0), worldMat);
		
		output.viewposition = mul(autoView, output.viewposition);
		output.viewnormal = mul(autoView, output.viewnormal);
		
		output.texcoord = mashGetTexcoords(input.texcoord);
		
		return output;
	}
}