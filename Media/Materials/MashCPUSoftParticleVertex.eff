include
{
	MashTexCoords.eff
}

autos
{
	float4x4 autoView
	float4x4 autoProjection
	float3 autoLightWorldPosition
}

vertexInput
{
	float3 position : position
	float2 texcoords : texcoord
	float4 colour : colour
}

vertexOutput
{
	float4 viewposition : viewposition
	float3 viewnormal : viewnormal
	float4 specular : specular
	float2 texcoords : texcoord pass
	float viewSpaceDepth : custom pass
	float4 projectedTexCoords : custom pass
	float4 colour : colour pass
}

source
{	
	VOUT vertexmain(VIN input)
	{
		VOUT output;
		
		output.colour = input.colour;
		output.texcoords = mashGetTexcoords(input.texcoords);
		output.viewposition = mul(autoView, float4(input.position, 1.0f));
		//particle normal is always directed at the main light
		output.viewnormal = mul(autoView, float4(autoLightWorldPosition - input.position, 1.0f));
		//set specular here incase of vertex lighting
		output.specular = float4(0.0f, 0.0f, 0.0f, 0.0f);
		
		//viewSpace position for linear depth
		output.viewSpaceDepth = output.viewposition.z;
		//screen position
		output.projectedTexCoords = mul(autoProjection, output.viewposition);

		return output;
	}
}